// userController.test.js
const userController = require("../controllers/userController");
const db = require('../config/db');

jest.mock('../config/db');

describe('getAllUsers', () => {
  it('returns a list of users for valid page and limit', async () => {
    const req = {
      query: {
        page: 1,
        limit: 10,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockResolvedValueOnce([[{ id: 1, username: 'user1' }], {}]);

    await userController.getAllUsers(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ data: [{ id: 1, username: 'user1' }] });
  });

  it('returns an empty list for an empty database', async () => {
    const req = {
      query: {
        page: 1,
        limit: 10,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockResolvedValueOnce([[], {}]);

    await userController.getAllUsers(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ data: [] });
  });

  it('handles errors gracefully', async () => {
    const req = {
      query: {
        page: 1,
        limit: 10,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockRejectedValueOnce(new Error('Database error'));

    await userController.getAllUsers(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Database error' });
  });
});

describe('createUser', () => {
  it('creates a new user for valid input', async () => {
    const req = {
      body: {
        email: 'newuser@example.com',
        password: 'password123',
        // Add other required fields here
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockResolvedValueOnce([[], { insertId: 1 }]);

    await userController.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ id: 1, email: 'newuser@example.com', /* Add other fields */ });
  });

  it('handles duplicate email gracefully', async () => {
    const req = {
      body: {
        email: 'existinguser@example.com',
        password: 'password123',
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockResolvedValueOnce([[{ email: 'existinguser@example.com' }], {}]);

    await userController.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(400);
    expect(res.json).toHaveBeenCalledWith('User already exists');
  });

  it('handles errors gracefully', async () => {
    const req = {
      body: {
        email: 'newuser@example.com',
        password: 'password123',
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    db.execute.mockRejectedValueOnce(new Error('Database error'));

    await userController.createUser(req, res);

    expect(res.status).toHaveBeenCalledWith(500);
    expect(res.json).toHaveBeenCalledWith({ message: 'Database error' });
  });
});

it('handles invalid page and limit values', async () => {
  const req = {
    query: {
      page: 'invalid', // Invalid page value
      limit: -5, // Negative limit value
    },
  };
  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn(),
  };

  await userController.getAllUsers(req, res);

  expect(res.status).toHaveBeenCalledWith(500);
  expect(res.json).toHaveBeenCalledWith({ message: 'Invalid page or limit value' });
});

it('handles missing required fields', async () => {
  const req = {
    body: {
      // Missing required fields
    },
  };
  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn(),
  };

  await userController.createUser(req, res);

  expect(res.status).toHaveBeenCalledWith(400);
  expect(res.json).toHaveBeenCalledWith({ message: 'Missing required fields' });
});

it('handles non-existent user', async () => {
  const req = {
    params: {
      id: 999, // Non-existent user ID
    },
  };
  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn(),
  };

  db.execute.mockResolvedValueOnce([[], {}]); // Mocking a successful DB query for non-existent user

  await userController.deleteUser(req, res);

  expect(res.status).toHaveBeenCalledWith(404);
  expect(res.json).toHaveBeenCalledWith('User not found');
});
